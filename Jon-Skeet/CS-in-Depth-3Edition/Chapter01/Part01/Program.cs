#region Russian

/*

Глава 1

 Изменение стиля разработки в С#

 В этой главе...

 Развивающийся пример
 Композиция .NET
 Использование кода в этой книге
 Спецификация языка С#

 Знаете, что мне по-настоящему нравится в динамических языках, таких как Python,
 Ruby и Groovy? Они отбрасывают из кода все незначительное, оставляя только его
 сущность - части, которые действительно что-то делают. Скучная формальность уступает
 дорогу средствам наподобие генераторов, лямбда-выражений и списковых включений.

 Интересно отметить, что некоторые средства, стремящиеся придать динамическим
 языкам легковесный характер, ничего не делают для обеспечения своей динамичности.
 Разумеется, определенные средства это делают - например, утиная (неявная) типизация
 и "магия", используемая в Active Record - но статически типизированные языки
 не обязательно должны быть неуклюжими и тяжеловесными.

 Давайте обратимся к С#. В некотором смысле язык С# 1 можно рассматривать как
 улучшенную версию языка Java образца примерно 2001 года. Все сходства были слишком
 очевидными, но в С# имелось несколько дополнений: свойства как основополагающая
 характеристика языка, делегаты и события, циклы foreach, операторы using,
 явное переопределение методов, перегрузка операций и специальные типы значений -
 и это далеко не полный перечень. Понятно, что предпочтения относительно языка -
 личное дело каждого, однако я воспринимал С# 1 как шаг вперед от Java, когда только
 начал пользоваться им.

 С тех пор все становилось только лучше. В каждую новую версию добавлялись
 важные средства, снижающие инстинктивный страх разработчиков, причем всегда в
 тщательно продуманной манере и с минимальной обратной несовместимостью. Даже
 до появления в С# 4 возможности применения динамической типизации там, где она
 действительно удобна, многие средства, традиционно связываемые с динамическими и
 функциональными языками, нашли свое отражение в С#, позволяя получать код. который
 проще в написании и сопровождении. Аналогично, хотя средства, касающиеся
 асинхронной обработки, в С# 5 не точно совпадают с такими средствами в F#, мне
 кажется, что последние оказали определенное влияние.

 В настоящей книге я последовательно проведу вас по всем изменениям, предоставляя
 достаточно деталей, чтобы вы спокойно воспринимали те удивительные вещи, которые
 компилятор С# теперь готов предложить. Тем не менее, обо всех них пойдет речь
 позже - в этой главе я в бешеном темпе постараюсь осветить столько, сколько смогу,
 едва переводя дыхание. Я объясню, что имеется в виду при сопоставлении С# как языка
 и .NET как платформы, и предоставлю несколько важных замечаний относительно кода
 примеров для остальных частей книги. После этого можно углубляться в детали.

 В этой одной главе мы не собираемся охватить абсолютно все изменения, внесенные
 в язык С#. Тем не менее, мы рассмотрим обобщения, свойства с различными модификаторами
 доступа, типы, допускающие значения null, анонимные методы, автоматически
 реализуемые свойства, усовершенствованные инициализаторы коллекций и объектов,
 лямбда-выражения, расширяющие методы (часто называемые также методами расширения),
 неявную типизацию, выражения запросов LINQ, именованные аргументы, необязательные
 параметры, упрощенное взаимодействие с СОМ, динамическую типизацию
 и асинхронные функции. Это проведет нас по всему пути от С# 1 до последней версии,
 С# 5. Итак, приступим.

*/

#endregion